// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  access_token       String?
  expires_at         BigInt?
  oauth_token        String?
  oauth_token_secret String?
  provider           String
  providerAccountId  String
  refresh_token      String?
  scope              String?
  token_type         String?
  type               String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  sessions      Session[]
  role          String?        @default("user")
  createdAt     DateTime?      @default(now())
  playlists     Playlist[]
  subscriptions Subscription[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Playlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  group     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sounds    Json
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Subscription {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail            String   @unique
  customerId           String
  stripeSubscriptionId String   @unique
  current_period_start DateTime // when the current period started
  current_period_end   DateTime // when the current period ends

  status               String // active, past_due, trialing, canceled, unpaid
  plan                 String? // free, pro
  price                Float? // amount in cents
  interval             String? // month, year
  cancel_at            DateTime? // when the subscription will be canceled
  cancel_at_period_end Boolean? // whether the subscription will be canceled at the end of the period
  trial_start          DateTime? // when the trial started
  trial_end            DateTime? // when the trial ends
  canceled_at          DateTime? // when the subscription was canceled
  ended_at             DateTime? // when the subscription ended
  metadata             Json? // additional data
}
